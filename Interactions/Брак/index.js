const {
  ApplicationCommandOptionType,
  ApplicationCommandType,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require('discord.js')
const Members = require('../../Schemas/Members')
const { channels } = require('../../Util/Config')
const CheckMarriage = require('./Functions/CheckMarriage')

module.exports = {
  data: {
    name: '–±—Ä–∞–∫',
    type: ApplicationCommandType.ChatInput,
    description: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É –≤—Å—Ç—É–ø–∏—Ç—å –±—Ä–∞–∫',
    options: [
      {
        name: '—É—á–∞—Å—Ç–Ω–∏–∫',
        type: ApplicationCommandOptionType.User,
        description: '–ö–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫?',
        required: true,
      },
    ],
  },
  run: async (interaction) => {
    const member = interaction.options.getMember('—É—á–∞—Å—Ç–Ω–∏–∫')
    const MemberData = await Members.findOne({ id: member.id })
    const InvokerData = await Members.findOne({ id: interaction.member.id })

    if (CheckMarriage(InvokerData)) {
      return interaction.reply({
        content: `**–¢—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ —Å <@${InvokerData.passport.marriage.id}>**`,
        ephemeral: true,
      })
    }

    if (CheckMarriage(MemberData)) {
      return interaction.reply({
        content: `**${member} —É–∂–µ –≤ –±—Ä–∞–∫–µ —Å <@${MemberData.passport.marriage.id}>**`,
        ephemeral: true,
      })
    }

    if (member.user.bot) {
      return interaction.reply({
        content: '**–ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º**',
        ephemeral: true,
      })
    }

    if (member === interaction.member) {
      return interaction.reply({
        content: '**–ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–æ–±–æ–π**',
        ephemeral: true,
      })
    }

    await interaction.reply({
      content: '**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ**',
      ephemeral: true,
    })

    const MarriagesChannel = await interaction.guild.channels.fetch(
      channels.marriages
    )

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('AcceptProposal')
        .setEmoji('‚úÖ')
        .setLabel('–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('DenyProposal')
        .setEmoji('‚ùå')
        .setLabel('–û—Ç–∫–∞–∑–∞—Ç—å')
        .setStyle(ButtonStyle.Danger)
    )
    const gifs = await interaction.client.tenor.Search.Query(
      `anime marriage proposal`,
      '50'
    )

    const gif =
      gifs[Math.floor(Math.random() * gifs.length)].media_formats.gif.url

    await MarriagesChannel.send({
      content: `üíç ${member}, —Å —Ç–æ–±–æ–π —Ö–æ—á–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ ${interaction.member}`,
      components: [row],
      files: [gif],
    })
  },
}
